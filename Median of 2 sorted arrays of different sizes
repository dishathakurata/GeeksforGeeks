//Median of 2 sorted arrays of different sizes

import java.io.*;
import java.lang.*;
import java.util.*;

class Driver {
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());

        while(t-- > 0) {
            String arr1[] = br.readLine().split(" ");
            int[] a = new int[arr1.length];

            for(int i = 0; i < a.length; i++) {
                a[i] = Integer.parseInt(arr1[i]);
            }

            String arr2[] = br.readLine().split(" ");
            int[] b = new int[arr2.length];

            for(int i = 0; i < arr2.length; i++) {
                b[i] = Integer.parseInt(arr2[i]);
            }

            if(b.length == 1 && b[0] == 0) {
                b = new int[0];
            }

            double res = new Solution().medianOf2(a, b);

            if(res == (int)res) {
                System.out.println((int)res);
            }
            else {
                System.out.println(res);
            }
            System.out.println("~");
        }
    }
}

class Solution {
    public double medianOf2(int a[], int b[]) {
        int n = a.length, m = b.length;

        if(n > m) {
            return medianOf2(b, a);
        }

        int lo = 0, hi = n;
        
        while(lo <= hi) {
            int mid1 = (lo + hi) / 2;
            int mid2 = (n + m + 1) / 2 - mid1;
            int l1 = (mid1 == 0) ? Integer.MIN_VALUE : a[mid1 - 1];
            int r1 = (mid1 == n) ? Integer.MAX_VALUE : a[mid1];
            int l2 = (mid2 == 0) ? Integer.MIN_VALUE : b[mid2 - 1];
            int r2 = (mid2 == m) ? Integer.MAX_VALUE : b[mid2];

            if(l1 <= r2 && l2 <= r1) {
                if((n + m) % 2 == 0) {
                    return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;
                }
                else {
                    return Math.max(l1, l2);
                }
            }

            if(l1 > r2) {
                hi = mid1 - 1;
            }
            else {
                lo = mid1 + 1;
            }
        }
        
        return 0;
    }
}
