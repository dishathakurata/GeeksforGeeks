//Minimum days to make m bouquets

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t = Integer.parseInt(sc.nextLine());

        while(t-- > 0) {
            String s[] = sc.nextLine().split(" ");
            int n = s.length;
            int[] arr = new int[n];

            for(int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(s[i]);
            }

            int m = Integer.parseInt(sc.nextLine());
            int k = Integer.parseInt(sc.nextLine());
            Solution obj = new Solution();
            int res = obj.minDaysBloom(m, k, arr);
            System.out.println(res);
            System.out.println("~");
        }
    }
}

class Solution {
    public static int minDaysBloom(int m, int k, int[] arr) {
        int lo = 0;
        int hi = Arrays.stream(arr).max().getAsInt();
        int res = -1;

        while(lo <= hi) {
            int mid = (lo + hi) / 2;

            if(check(arr, k, m, mid)) {
                res = mid;
                hi = mid - 1;
            }
            else {
                lo = mid + 1;
            }
        }
        return res;
    }
    
    static boolean check(int[] arr, int k, int m, int days) {
        int bouquets = 0;
        int cnt = 0;

        for(int i = 0; i < arr.length; i++) {
            if(arr[i] <= days) {
                cnt += 1;
            }
            else {
                bouquets += cnt / k;
                cnt = 0;
            }
        }
        
        bouquets += cnt / k;

        return bouquets >= m;
    }
}
